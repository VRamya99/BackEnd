package com.example.blog.service.Impl;

import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.query.EqlParser.New_valueContext;
import org.springframework.stereotype.Service;

import com.example.blog.dto.CommentResponseDto;
import com.example.blog.dto.PostCommentResponse;
import com.example.blog.entity.CommentEntity;
import com.example.blog.entity.PostEntity;
import com.example.blog.exception.PostNotFoundException;
import com.example.blog.repo.CommentRepository;
import com.example.blog.repo.PostRepository;
import com.example.blog.service.BlogService;
@Service
public class BlogServiceImpl implements BlogService{
	
	private PostRepository postRepository;
	private CommentRepository commentRepository;
	@Autowired
	public BlogServiceImpl(PostRepository postRepository,CommentRepository commentRepository) {
		this.postRepository=postRepository;
		this.commentRepository=commentRepository;
	}

	@Override
	public String createBlogPost(PostEntity post) {
		postRepository.save(post);
		return "Successfully created the post";
	}

	@Override
	public String addComment(int id,CommentEntity comment) {
		PostEntity post=postRepository.findById(id).orElseThrow(()->new PostNotFoundException("post with id "+id+" is not Exists"));
		comment.setPost(post);
		commentRepository.save(comment);
		return "Successfully added the comment";
		
	}

	@Override
	public PostCommentResponse getComments(int id) {
		PostEntity post=postRepository.findById(id).orElseThrow(()->new PostNotFoundException("post with id "+id+" is not Exists"));
		 List<CommentResponseDto> commentResponses = post.getComments().stream()
			        .map(comment -> new CommentResponseDto(
			            comment.getId(),
			            comment.getAuthorId(),
			            comment.getContent(),
			            comment.getCreatedAt()
			        ))
			        .collect(Collectors.toList());
		 
		return new PostCommentResponse(post.getId(),commentResponses);
		
	}

}
