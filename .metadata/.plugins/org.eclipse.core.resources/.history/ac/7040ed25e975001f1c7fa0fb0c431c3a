package com.example.app.jwt;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {
	
private JwtValidationFilter jwtValidationFilter;
public SecurityConfig(JwtValidationFilter jwtValidationFilter) {
	this.jwtValidationFilter=jwtValidationFilter;
}

SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception{
	 http.sessionManagement(management -> management.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
	 http.csrf(csrf->csrf.disable());
	 http.authorizeRequests(requests ->
     requests
             .antMatchers(HttpMethod.DELETE, "/emp/employees/{empId}").hasRole("ADMIN")
             .antMatchers(HttpMethod.GET, "/emp/employees/{empId}").hasAnyRole("USER", "ADMIN")
             .antMatchers(HttpMethod.GET, "/emp/employees").hasRole("ADMIN")
             .antMatchers(HttpMethod.POST, "/emp/authentication").hasAnyRole("ADMIN","USER")
             .antMatchers(HttpMethod.POST, "/emp/employees","/emp/authentication","/authority/auth").permitAll()
             .anyRequest().authenticated()
).addFilterBefore(jwtValidationFilter, UsernamePasswordAuthenticationFilter.class);
	 http.formLogin(Customizer.withDefaults());
     http.httpBasic(Customizer.withDefaults())
}



}
