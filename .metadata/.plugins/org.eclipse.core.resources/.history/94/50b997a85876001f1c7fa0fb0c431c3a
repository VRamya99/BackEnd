package com.example.app.service.impl;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.stereotype.Service;

import com.example.app.dto.OrderItemRequest;
import com.example.app.dto.OrderRequest;
import com.example.app.entity.OrderEntity;
import com.example.app.entity.OrderItemEntity;
import com.example.app.entity.ProductEntity;
import com.example.app.entity.UserEntity;
import com.example.app.exception.ResourceNotFoundException;
import com.example.app.repo.OrderRepository;
import com.example.app.repo.ProductRepository;
import com.example.app.service.OrderService;
@Service
public class OrderServiceImpl implements OrderService{
	
	private OrderRepository orderRepository;
	
	private ProductRepository productRepository;
	
	OrderServiceImpl(OrderRepository orderRepository,ProductRepository productRepository)
	{
		this.orderRepository=orderRepository;
		this.productRepository=productRepository;
	}

	@Override
	public String createOrder(OrderRequest orderRequest) {
		 OrderEntity order = new OrderEntity();
	        order.setUser(new UserEntity(orderRequest.getUserId()));
	        order.setStatus("Pending");

	        BigDecimal totalPrice = BigDecimal.ZERO;

	      
	        for (OrderItemRequest itemRequest : orderRequest.getOrderItems()) {
	            OrderItemEntity orderItem = new OrderItemEntity();
	            ProductEntity product = productRepository.findById(itemRequest.getProductId())
	                    .orElseThrow(() -> new RuntimeException("Product not found"));
	            orderItem.setProduct(product);
	            orderItem.setQuantity(itemRequest.getQuantity());
	            orderItem.setPrice(product.getPrice().multiply(new BigDecimal(itemRequest.getQuantity()))); // Calculate price for this item
	            
	            totalPrice = totalPrice.add(orderItem.getPrice()); 
	            order.addOrderItem(orderItem); 
	        }

	        order.setTotalPrice(totalPrice);
	         orderRepository.save(order);
	         return "order created successfully";
	    }
	

	@Override
	public List<OrderEntity> getOrders(int userId) {
		List<OrderEntity> order=orderRepository.findByUserId(userId);
		return order;
		
	}

	@Override
	public OrderEntity getOrder(int order_id) {
		
		return orderRepository.findById(order_id).orElseThrow(()->new ResourceNotFoundException("Order Not Found with idc"+order_id));
		
	}

}
